using Nullify.Configuration;
using System;
using Nullify.Utils;

namespace Nullify.Factory
{
    class NullifiedBuilder
    {
        private readonly ITypeRegistry registry;
        private readonly IPolicyRepository policyRepository;

        public NullifiedBuilder(IPolicyRepository policyRepository, ITypeRegistry registry)
        {
            this.policyRepository = policyRepository;
            this.registry = registry;
        }

        public Type GetOrBuild(CreationPolicy policy)
        {
            Type nullifiedType;
            if (!registry.TryGetType(policy.Target, policy.AutoGeneratedClassName, out nullifiedType))
            {
                nullifiedType = Build(policy);
            }

            //instanciate type
            return nullifiedType;
        }

        public Type Build(CreationPolicy policy)
        {
            //enumerate all dependencies
            var deps = DependencyStack.Enumerate(policy.Target);

            // build dependencies (nested types)
            using (var scope = new CreationScope(registry))
            {

                var typeFactory = new TypeFactory(scope, registry);
                //ensure that all children have been created first
                foreach (var nestedInterface in deps.Children)
                {
                    Type autogenerated;

                    // has specific creation policy ?
                    var childPolicy = policy.Search(nestedInterface);
                   
                    //exists in scope/registry
                    if (scope.TryGet(nestedInterface, policy.Name, out autogenerated))
                        continue;

                    //create new type
                    autogenerated = typeFactory.Create(childPolicy);

                    if(autogenerated != null)
                        scope.Attach(autogenerated);
                }

                //create requested type
                var newType = typeFactory.Create(policy);
                return newType;
            }
        }
    }
}
